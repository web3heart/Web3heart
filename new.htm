<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="mobile-web-app-capable" content="yes">
    <title>Forex Sessions (WAT)</title>
    <style>
        :root {
            --primary: #007bff;
            --success: #28a745;
            --warning: #ffca2c;
            --inactive: #6c757d;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
            background: linear-gradient(135deg, #f0f2f5, #e9ecef);
            min-height: 100vh;
            padding: 10px;
            overflow-x: hidden;
            -webkit-user-select: none;
            user-select: none;
        }

        .app-container {
            max-width: 700px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            overflow: hidden;
        }

        .header {
            background: var(--primary);
            color: white;
            padding: 15px;
            text-align: center;
            position: relative;
        }

        .time-display {
            font-size: 1.2rem;
            margin: 10px 0;
            color: white;
            opacity: 0.9;
        }

        .session-grid {
            padding: 15px;
            display: grid;
            gap: 15px;
        }

        .session-card, .overlap-card {
            padding: 15px;
            border-radius: 10px;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .session-card {
            background: #fff;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .session-card.active {
            border: 2px solid var(--success);
            transform: scale(1.02);
        }

        .overlap-card {
            background: linear-gradient(45deg, #fff3cd, #ffe8a1);
            border: 2px solid var(--warning);
        }

        .hidden {
            display: none;
        }

        .status-dot {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 8px;
        }

        .active .status-dot {
            background: var(--success);
        }

        .inactive .status-dot {
            background: var(--inactive);
        }

        h2 {
            font-size: 1.1rem;
            margin-bottom: 8px;
            display: flex;
            align-items: center;
        }

        p {
            font-size: 0.9rem;
            color: #444;
            line-height: 1.4;
        }

        .pairs-list {
            font-size: 0.85rem;
            color: #666;
            margin-top: 5px;
        }

        .progress-bar {
            height: 4px;
            background: #e9ecef;
            margin-top: 10px;
            border-radius: 2px;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: var(--primary);
            transition: width 1s linear;
        }

        @media (max-width: 480px) {
            .app-container {
                margin: 0 5px;
            }
            .header {
                padding: 10px;
            }
            .session-grid {
                padding: 10px;
                gap: 10px;
            }
            h2 {
                font-size: 1rem;
            }
            p {
                font-size: 0.8rem;
            }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <div class="header">
            <h1>Forex Market Sessions</h1>
            <div id="current-time" class="time-display"></div>
        </div>
        <div class="session-grid">
            <div id="sydney" class="session-card">
                <h2><span class="status-dot"></span>Sydney</h2>
                <p>21:00 - 06:00 WAT</p>
                <p class="pairs-list"></p>
                <div class="progress-bar"><div class="progress-fill"></div></div>
            </div>
            <div id="tokyo" class="session-card">
                <h2><span class="status-dot"></span>Tokyo</h2>
                <p>01:00 - 10:00 WAT</p>
                <p class="pairs-list"></p>
                <div class="progress-bar"><div class="progress-fill"></div></div>
            </div>
            <div id="london" class="session-card">
                <h2><span class="status-dot"></span>London</h2>
                <p>09:00 - 18:00 WAT</p>
                <p class="pairs-list"></p>
                <div class="progress-bar"><div class="progress-fill"></div></div>
            </div>
            <div id="new-york" class="session-card">
                <h2><span class="status-dot"></span>New York</h2>
                <p>13:00 - 22:00 WAT</p>
                <p class="pairs-list"></p>
                <div class="progress-bar"><div class="progress-fill"></div></div>
            </div>
            <div id="overlap" class="overlap-card hidden">
                <h2>Market Overlap</h2>
                <p id="overlap-name"></p>
                <p id="overlap-times"></p>
                <p class="pairs-list" id="overlap-pairs"></p>
                <div class="progress-bar"><div class="progress-fill"></div></div>
            </div>
        </div>
    </div>

    <script>
        const SESSIONS = {
            "sydney": { start: "21:00", end: "06:00", pairs: ["AUD/USD", "NZD/USD"] },
            "tokyo": { start: "01:00", end: "10:00", pairs: ["USD/JPY", "GBP/JPY", "EUR/JPY", "AUD/JPY"] },
            "london": { start: "09:00", end: "18:00", pairs: ["EUR/USD", "GBP/USD", "EUR/GBP", "USD/CHF", "EUR/JPY", "GBP/JPY"] },
            "new-york": { start: "13:00", end: "22:00", pairs: ["EUR/USD", "USD/JPY", "GBP/USD", "USD/CAD", "USD/CHF"] }
        };

        const OVERLAPS = {
            "Tokyo-London": { start: "09:00", end: "10:00", pairs: ["USD/JPY", "EUR/JPY", "GBP/JPY", "EUR/USD", "GBP/USD"] },
            "London-New York": { start: "13:00", end: "18:00", pairs: ["EUR/USD", "GBP/USD", "USD/JPY", "USD/CHF", "USD/CAD"] },
            "Sydney-Tokyo": { start: "01:00", end: "06:00", pairs: ["AUD/USD", "NZD/USD", "USD/JPY"] }
        };

        function timeToMinutes(timeStr) {
            const [hours, minutes] = timeStr.split(":").map(Number);
            return hours * 60 + minutes;
        }

        function getWATTime() {
            const now = new Date();
            return new Date(now.toLocaleString("en-US", { timeZone: "Africa/Lagos" }));
        }

        function calculateProgress(start, end, current) {
            const startMins = timeToMinutes(start);
            const endMins = timeToMinutes(end);
            const currentMins = timeToMinutes(current.toTimeString().slice(0, 5));
            
            let total, elapsed;
            if (endMins < startMins) {
                total = (24 * 60 - startMins) + endMins;
                elapsed = currentMins >= startMins 
                    ? currentMins - startMins 
                    : (24 * 60 - startMins) + currentMins;
            } else {
                total = endMins - startMins;
                elapsed = currentMins - startMins;
            }
            return Math.max(0, Math.min(100, (elapsed / total) * 100));
        }

        function updateDisplay() {
            const now = getWATTime();
            const currentMinutes = timeToMinutes(now.toTimeString().slice(0, 5));
            
            document.getElementById("current-time").textContent = 
                `${now.toTimeString().slice(0, 8)} WAT | ${now.toDateString()}`;

            // Update sessions
            for (const [sessionId, info] of Object.entries(SESSIONS)) {
                const card = document.getElementById(sessionId);
                const start = timeToMinutes(info.start);
                const end = timeToMinutes(info.end);
                const isActive = start > end 
                    ? (currentMinutes >= start || currentMinutes < end)
                    : (currentMinutes >= start && currentMinutes < end);

                card.classList.toggle("active", isActive);
                card.querySelector(".pairs-list").textContent = info.pairs.join(", ");
                
                if (isActive) {
                    const progress = calculateProgress(info.start, info.end, now);
                    card.querySelector(".progress-fill").style.width = `${progress}%`;
                } else {
                    card.querySelector(".progress-fill").style.width = "0%";
                }
            }

            // Update overlap
            const overlapCard = document.getElementById("overlap");
            let activeOverlap = null;
            for (const [name, info] of Object.entries(OVERLAPS)) {
                const start = timeToMinutes(info.start);
                const end = timeToMinutes(info.end);
                if (currentMinutes >= start && currentMinutes < end) {
                    activeOverlap = { name, ...info };
                    break;
                }
            }

            if (activeOverlap) {
                overlapCard.classList.remove("hidden");
                document.getElementById("overlap-name").textContent = activeOverlap.name;
                document.getElementById("overlap-times").textContent = 
                    `${activeOverlap.start} - ${activeOverlap.end} WAT`;
                document.getElementById("overlap-pairs").textContent = activeOverlap.pairs.join(", ");
                
                const progress = calculateProgress(activeOverlap.start, activeOverlap.end, now);
                overlapCard.querySelector(".progress-fill").style.width = `${progress}%`;
            } else {
                overlapCard.classList.add("hidden");
            }
        }

        // Service Worker for offline capability (optional)
        if ('serviceWorker' in navigator) {
            navigator.serviceWorker.register('/service-worker.js')
                .catch(err => console.log('Service Worker registration failed:', err));
        }

        setInterval(updateDisplay, 1000);
        updateDisplay();
    </script>
</body>
</html>